% d1_imu.m:

clear all
close all
clc

% position bias because of the difference placements of the GPS antenna and
% IMU sensor
hBias = 0.194;
rBias = 0.278;
dBias = -0.9;

msrArr = zeros(7,1);
resArr = zeros(1,9);

% initial position, velocity, and attitude
% lla0 = [deg2rad(30.5631420296), deg2rad(114.4697206604), 14.238];
% vel0 = [0.001, -0.000, -0.001];
% rpy0 = deg2rad([0.001, 0.001, 0.038]);
% dv0 = 0;
% qbn0 = rpy2qbn(rpy0);
% beginPlotTime = 442336;
% fileID = fopen('d1_imu.bin');

lla0 = [deg2rad(23.1373950708), deg2rad(113.3713651222), 2.175];
vel0 = [0, 0, 0];
rpy0 = deg2rad([0.0107951084511778, -2.14251290749072, -75.7498049314083]);
dv0 = 0;
qbn0 = eul2quat(flip(rpy0));
beginPlotTime = 91620;
fileID = fopen('/Users/xu/Documents/Research/Program/Ins/Data/Data1.bin');

endPlotTime = beginPlotTime + 36;

i = 0;

msrk = fread(fileID,7,'double');

while msrk(1) < beginPlotTime
    msrk = fread(fileID,7,'double');
end

while ~feof(fileID) & msrk(1) < endPlotTime
    msrk1 = fread(fileID,7,'double');
    
    % place to put inertial mechanization function
    % [lla, vel, rpy, dv, qbn] = ins_mechanization(lla0, vel0, rpy0, dv0, qbn0, msrk, msrk1);
    [lla, vel, rpy, dv, qbn] = ins_mechanization_compact(lla0, vel0, rpy0, dv0, qbn0, msrk, msrk1);

    msrArr = [msrArr msrk1];
    resArr = [resArr; lla vel rpy];
    i = i+1;
    
    lla0 = lla; vel0 = vel; rpy0 = rpy;
    dv0 = dv; qbn0 = qbn;
    msrk = msrk1;    
end 

msrArr = msrArr(:,2:end);
resArr = resArr(2:end,:);

% plots

time = msrArr(1,:);
figure
subplot(3,1,1);
plot(time, rad2deg(msrArr(2,:)));
hold on; grid on
ylabel('{{\Delta}{\theta}_x} (deg)');
subplot(3,1,2);
plot(time, rad2deg(msrArr(3,:)));
hold on; grid on
ylabel('{{\Delta}{\theta}_y} (deg)');
subplot(3,1,3);
plot(time, rad2deg(msrArr(4,:)));
hold on; grid on
ylabel('{{\Delta}{\theta}_z} (deg)');
xlabel('Time (s)');

figure
subplot(3,1,1);
plot(time, msrArr(5,:));
hold on; grid on
ylabel('{{\Delta}v_x} (m/s)');
subplot(3,1,2);
plot(time, msrArr(6,:));
hold on; grid on
ylabel('{{\Delta}v_y} (m/s)');
subplot(3,1,3);
plot(time, msrArr(7,:));
hold on; grid on
ylabel('{{\Delta}v_z} (m/s)');

fclose(fileID);


len = length(time);
true_res = load('res.txt');
figure
subplot(3,1,1);
plot(time, rad2deg(true_res(1:len,2)));
hold on; grid on
ylabel('true latitude (deg)');
subplot(3,1,2);
plot(time, rad2deg(true_res(1:len,3)));
hold on; grid on
ylabel('true longitude (deg)');
subplot(3,1,3);
plot(time, true_res(1:len,4));
hold on; grid on
ylabel('true altitude (m)');
xlabel('Time (s)');

figure
subplot(3,1,1);
plot(time, rad2deg(resArr(:,1)));
hold on; grid on
ylabel('latitude (deg)');
subplot(3,1,2);
plot(time, rad2deg(resArr(:,2)));
hold on; grid on
ylabel('longitude (deg)');
subplot(3,1,3);
plot(time, resArr(:,3));
hold on; grid on
ylabel('altitude (m)');
xlabel('Time (s)');

figure
subplot(3,1,1);
plot(time, rad2deg(resArr(:,1)-true_res(1:len,2)));
hold on; grid on
ylabel('latitude (deg)');
subplot(3,1,2);
plot(time, rad2deg(resArr(:,2)-true_res(1:len,3)));
hold on; grid on
ylabel('longitude (deg)');
subplot(3,1,3);
plot(time, resArr(:,3)-true_res(1:len,4));
hold on; grid on
ylabel('altitude (m)');
xlabel('Time (s)');



















% ins_mechanization_compact.m:

function [lla, vel, rpy, dv, qbn] = ins_mechanization_compact(lla0, vel0, rpy0, dv0, qbn0, msrk, msrk1)

WGS84_A = 6378137.0;           % earth semi-major axis (WGS84) (m) 
WGS84_B = 6356752.3142;        % earth semi-minor axis (WGS84) (m) 
e = sqrt(WGS84_A * WGS84_A - WGS84_B * WGS84_B) / WGS84_A;

% rotational angular velocity of earth
omega_e = 7.2921151467e-5;   

% wgs84 = wgs84Ellipsoid;
dt = msrk1(1) - msrk(1);

% update the velocity
gy0 = msrk(2:4);
ac0 = msrk(5:7);
gy = msrk1(2:4);
ac = msrk1(5:7);
dvfb_k = 1.0/12.0*(cross(gy0,ac) + cross(ac0,gy)) + 0.5*cross(gy,ac);
dvfb_k = ac + dvfb_k;

% compute cbn0
cbn0 = quat2dcm(qbn0);

qne = zeros(1,4);
qne(1) = cos(-pi / 4.0 - lla0(1) / 2.0) * cos(lla0(2) / 2.0);
qne(2) = -sin(-pi / 4.0 - lla0(1) / 2.0) * sin(lla0(2) / 2.0);
qne(3) = sin(-pi / 4.0 - lla0(1) / 2.0) * cos(lla0(2) / 2.0);
qne(4) = cos(-pi / 4.0 - lla0(1) / 2.0) * sin(lla0(2) / 2.0);

qee_h = zeros(1,4); qnn_l = zeros(1,4);

% compute rn, rm
rn = WGS84_A / sqrt(1 - e * e * sin(lla0(1)) * sin(lla0(1)));
rm = WGS84_A * (1 - e * e) / sqrt(power(1 - e * e * sin(lla0(1)) * sin(lla0(1)), 3));

% compute wie
wie(1) = omega_e * cos(lla0(1));
wie(2) = 0;
wie(3) = -omega_e * sin(lla0(1));

% compute wen
wen(1) = vel0(2) / (rn + lla0(3));
wen(2) = -vel0(1) / (rm + lla0(3));
wen(3) = -vel0(2) * tan(lla0(1)) / (rn + lla0(3));
win = wie + wen;

% compute g_l
gl = zeros(1,3);

grav = [9.7803267715, 0.0052790414, 0.0000232718, -0.000003087691089, 0.000000004397731, 0.000000000000721];
sinB = sin(lla0(1));
sinB2 = sinB * sinB;
sinB4 = sinB2 * sinB2;
gl(3) = grav(1) * (1.0 + grav(2) * sinB2 + grav(3) * sinB4) + (grav(4) + grav(5) * sinB2) * lla0(3) + grav(6) * lla0(3) * lla0(3);

zeta_m = dt.*win/2.0;
half_zeta = 0.5*zeta_m;
mold = norm(half_zeta);
sc = sin(mold) / mold;
qnn_l(1) = cos(mold);
qnn_l(2) = sc * half_zeta(1);
qnn_l(3) = sc * half_zeta(2);
qnn_l(4) = sc * half_zeta(3);

wiee = [0 0 omega_e];

xi_m = dt.*wiee/2.0;       % 0.5: half size for extrapolating lla at time(k+1/2) 
half_xi = -0.5*xi_m;
mold = norm(half_xi);
sc = sin(mold) / mold;
qee_h(1) = cos(mold);
qee_h(2) = sc * half_xi(1);
qee_h(3) = sc * half_xi(2);
qee_h(4) = sc * half_xi(3);

qne_l = quatmultiply(qne, qnn_l);
qne_m = quatmultiply(qee_h, qne_l);

lla_m = zeros(1,3);

if qne_m(1) ~= 0
    lla_m(2) = 2 * atan(qne_m(4) / qne_m(1));
    lla_m(1) = 2 * (-pi / 4.0 - atan(qne_m(3) / qne_m(1)));
elseif qne_m(1) == 0 & qne_m(3) == 0
    lla_m(2) = pi;
    lla_m(1) = 2 * (-pi / 4.0 - atan(-qne_m(2) / qne_m(4)));
elseif qne_m(1) == 0 & qne_m(4) == 0
    lla_m(2) = 2 * atan(-qne_m(2) / qne_m(3));
    lla_m(1) = pi / 2.0;
end
    
lla_m(3) = lla0(3) - (vel0(3) * dt) / 2.0;

% extrapolate the speed
vel_m = vel0 + 0.5 * dv0;

% compute the wie_m, wen_m
% compute rn, rm
rn = WGS84_A / sqrt(1 - e * e * sin(lla_m(1)) * sin(lla_m(1)));
rm = WGS84_A * (1 - e * e) / sqrt(power(1 - e * e * sin(lla_m(1)) * sin(lla_m(1)), 3));

% compute wie_m
wie_m(1) = omega_e * cos(lla_m(1));
wie_m(2) = 0;
wie_m(3) = -omega_e * sin(lla_m(1));

% compute wen_m
wen_m(1) = vel_m(2) / (rn + lla_m(3));
wen_m(2) = -vel_m(1) / (rm + lla_m(3));
wen_m(3) = -vel_m(2) * tan(lla_m(1)) / (rn + lla_m(3));
win_m = wie_m + wen_m;

% compute g_l
gl_m = zeros(1,3);
sinB = sin(lla_m(1));
sinB2 = sinB * sinB;
sinB4 = sinB2 * sinB2;
gl_m(3) = grav(1) * (1.0 + grav(2) * sinB2 + grav(3) * sinB4) + (grav(4) + grav(5) * sinB2) * lla0(3) + grav(6) * lla0(3) * lla0(3);

% compute true zeta
zeta = win_m .* dt;
cnn = eye(3,3);

cnn(1,2) = -0.5 * zeta(3);
cnn(1,3) =  0.5 * zeta(2);
cnn(2,1) =  0.5 * zeta(3);
cnn(2,3) = -0.5 * zeta(1);
cnn(3,1) = -0.5 * zeta(2);
cnn(3,2) =  0.5 * zeta(1);
    
% calculate dvfn_k, dvgn_k
dvfn_k = (cbn0*cnn)'*dvfb_k;              %%%%??????????????????????????????? transpose
dvfn_k = dvfn_k';
dvgn_k = (gl_m-cross((2*wie_m+wen_m), vel_m)).* dt;

% update velocity
dv = dvfn_k + dvgn_k;
vel = vel0 + dv;

% update the position
vel_m = 0.5*(vel0 + vel);

qnn_h = zeros(1,4);
qee_l = zeros(1,4);
    
% recompute the wie_m, wen_m
rn = WGS84_A / sqrt(1 - e * e * sin(lla_m(1)) * sin(lla_m(1)));
rm = WGS84_A * (1 - e * e) / sqrt(power(1 - e * e * sin(lla_m(1)) * sin(lla_m(1)), 3));

% compute wie_m
wie_m(1) = omega_e * cos(lla_m(1));
wie_m(2) = 0;
wie_m(3) = -omega_e * sin(lla_m(1));

% compute wen_m
wen_m(1) = vel_m(2) / (rn + lla_m(3));
wen_m(2) = -vel_m(1) / (rm + lla_m(3));
wen_m(3) = -vel_m(2) * tan(lla_m(1)) / (rn + lla_m(3));
win_m = wie_m + wen_m;

% compute g_l
gl_m = zeros(1,3);
sinB = sin(lla_m(1));
sinB2 = sinB * sinB;
sinB4 = sinB2 * sinB2;
gl_m(3) = grav(1) * (1.0 + grav(2) * sinB2 + grav(3) * sinB4) + (grav(4) + grav(5) * sinB2) * lla0(3) + grav(6) * lla0(3) * lla0(3);

% recompute zeta, xi
zeta_m = win_m.*dt;
half_zeta = 0.5*zeta_m;
mold = norm(half_zeta);
sc = sin(mold) / mold;
qnn_h(1) = cos(mold);
qnn_h(2) = sc * half_zeta(1);
qnn_h(3) = sc * half_zeta(2);
qnn_h(4) = sc * half_zeta(3);

xi_m = wiee.* dt;
half_xi = -0.5*xi_m;
mold = norm(half_xi);
sc = sin(mold) / mold;
qee_l(1) = cos(mold);
qee_l(2) = sc * half_xi(1);
qee_l(3) = sc * half_xi(2);
qee_l(4) = sc * half_xi(3);

% recompute the qnn_h
qne_h = quatmultiply(qne, qnn_h);
qne = quatmultiply(qee_l, qne_h);

lla = zeros(1,3);

if qne(1) ~= 0
    lla(2) = 2 * atan(qne(4) / qne(1));
    lla(1) = 2 * (-pi / 4.0 - atan(qne(3) / qne(1)));
elseif qne(1) == 0 & qne(3) == 0
    lla(2) = pi;
    lla(1) = 2 * (-pi / 4.0 - atan(-qne(2) / qne(4)));
elseif qne(1) == 0 & qne(4) == 0
    lla(2) = 2 * atan(-qne(2) / qne(3));
    lla(1) = pi / 2.0;
end
    
lla(3) = lla0(3) - vel_m(3) * dt;

% update the attitude
qdthe_half = zeros(1,4);
qne0 = zeros(1,4);

% compute qne0
qne0(1) = cos(-pi / 4.0 - lla0(1) / 2.0) * cos(lla0(2) / 2.0);
qne0(2) = -sin(-pi / 4.0 - lla0(1) / 2.0) * sin(lla0(2) / 2.0);
qne0(3) = sin(-pi / 4.0 - lla0(1) / 2.0) * cos(lla0(2) / 2.0);
qne0(4) = cos(-pi / 4.0 - lla0(1) / 2.0) * sin(lla0(2) / 2.0);

qneo_inv = quatinv(qne0);

qdthe = quatmultiply(qneo_inv, qne)';

vec = zeros(1,3);

if qdthe(1) ~= 0
    phi_m = atan(sqrt(qdthe(2)*qdthe(2)+qdthe(3)*qdthe(3)+qdthe(4)*qdthe(4))/qdthe(1));
    f = 0.5 * sin(phi_m) / phi_m;
    vec(1) = qdthe(2) / f;
    vec(2) = qdthe(3) / f;
    vec(3) = qdthe(4) / f;
else
    vec(1:3) = pi * qdthe(2:4);
end

vec_half = 0.5 * vec;

v = 0.5 * vec_half;
mold = norm(v, 3);
sc = sin(mold) / mold;
qdthe_half(1) = cos(mold);
qdthe_half(2) = sc * v(1);
qdthe_half(3) = sc * v(2);
qdthe_half(4) = sc * v(3);
    
qne_m = quatmultiply(qne0, qdthe_half);        % communication law
lla_m = zeros(1,3);

if qne_m(1) ~= 0
    lla_m(2) = 2 * atan(qne_m(4) / qne_m(1));
    lla_m(1) = 2 * (-pi / 4.0 - atan(qne_m(3) / qne_m(1)));
elseif qne_m(1) == 0 & qne_m(3) == 0
    lla_m(2) = pi;
    lla_m(1) = 2 * (-pi / 4.0 - atan(-qne_m(2) / qne_m(4)));
elseif qne_m(1) == 0 & qne_m(4) == 0
    lla_m(2) = 2 * atan(-qne_m(2) / qne_m(3));
    lla_m(1) = pi / 2.0;
end

lla_m(3) = (lla0(3) + lla(3)) / 2.0;

% compute rn, rm
rn = WGS84_A / sqrt(1 - e * e * sin(lla_m(1)) * sin(lla_m(1)));
rm = WGS84_A * (1 - e * e) / sqrt(power(1 - e * e * sin(lla_m(1)) * sin(lla_m(1)), 3));

% compute wie_m
wie_m(1) = omega_e * cos(lla_m(1));
wie_m(2) = 0;
wie_m(3) = -omega_e * sin(lla_m(1));

% compute wen_m
wen_m(1) = vel_m(2) / (rn + lla_m(3));
wen_m(2) = -vel_m(1) / (rm + lla_m(3));
wen_m(3) = -vel_m(2) * tan(lla_m(1)) / (rn + lla_m(3));
win_m = wie_m + wen_m;

% compute g_l
gl_m = zeros(1,3);
sinB = sin(lla_m(1));
sinB2 = sinB * sinB;
sinB4 = sinB2 * sinB2;
gl_m(3) = grav(1) * (1.0 + grav(2) * sinB2 + grav(3) * sinB4) + (grav(4) + grav(5) * sinB2) * lla0(3) + grav(6) * lla0(3) * lla0(3);

% recompute zeta, xi
phi = gy+1/12*cross(gy0, gy);
half_phi = 0.5*phi;
mold = norm(half_phi);
sc = sin(mold) / mold;
qbb(1) = cos(mold);
qbb(2) = sc * half_phi(1);
qbb(3) = sc * half_phi(2);
qbb(4) = sc * half_phi(3);

zeta = win_m.*dt;
half_zeta = -0.5*zeta;
mold = norm(half_zeta);
sc = sin(mold) / mold;
qnn(1) = cos(mold);
qnn(2) = sc * half_zeta(1);
qnn(3) = sc * half_zeta(2);
qnn(4) = sc * half_zeta(3);

tmp_q = quatmultiply(qbn0, qbb);
qbn = quatmultiply(qnn, tmp_q);

% normalization
e_q = sumsqr(qbn);
e_q = 1 - 0.5 * (e_q - 1);
qbn = e_q.*qbn;

rpy = flip(quat2eul(qbn));

end
